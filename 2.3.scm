(define (make-segment p1 p2)
  (let ((x1 (x-point p1))
        (x2 (x-point p2))
        (y1 (y-point p1))
        (y2 (y-point p2)))
    (if (or (< x1 x2)
            (and ((= x1 x2)
                  (< y1 y2))))
        (cond p1 p2)
        (cond p2 p1))))

(define (start-segment s)
  (car s))

(define (end-segment s)
  (cdr s))

(define (length-segment s)
  (sqrt (+ (square (- (x-point (end-segment s))
                      (x-point (start-segment s))))
           (square (- (y-point (end-segment s))
                      (y-point (start-segment s)))))))

(define (slope-segment s)
  (/ (- (y-point (end-segment s))
        (y-point (start-segment s)))
     (- (x-point (end-segment s))
        (x-point (start-segment s)))))

(define (parallel? s1 s2)
  (let ((delta-x1 (- (x-point (end-segment s1))
                     (x-point (start-segment s1))))
        (delta-x2 (- (x-point (end-segment s2))
                     (x-point (start-segment s2)))))
    (or (and (= delta-x1 0)
             (= delta-x2 0))
        (and (not (and (= delta-x1 0)
                       (not (= delta-x2 0))))
             (not (and (not (= delta-x1 0))
                       (= delta-x2 0)))
             (= (slope-segment s1)
                (slope-segment s2))))))

(define (perpendicular? s1 s2)
  (let ((delta-x1 (- (x-point (end-segment s1))
                     (x-point (start-segment s1))))
        (delta-x2 (- (x-point (end-segment s2))
                     (x-point (start-segment s2)))))
    (and (not (and (= delta-x1 0)
                   (= delta-x2 0)))
         (or (and (= delta-x1 0)
                  (= (slope-segment s2) 0))
             (and (= delta-x2 0)
                  (= (slope-segment s1) 0))
             (= (slope-segment s1)
                (- (/ 1 (slope-segment s2))))))))

(define (make-point x y)
  (cons x y))

(define (x-point p)
  (car p))

(define (y-point p)
  (cdr p))

(define (make-rectangle s1 s2)
  (let ((a (length-segment s1))
        (b (cond ((parallel? s1 s2)
                  (length-segment (make-segment (end-segment s1)
                                                (end-segment s2))))
                 ((perpendicular? s1 s2)
                  (length-segment s2))
                 (else (error "Provided segments are not parallel nor perpendicular")))))
    (cons a b)))

(define (a-rectangle r)
  (car r))

(define (b-rectangle r)
  (cdr r))

(define (perimeter-rectangle r)
  (+ (* 2 (a-rectangle r))
     (* 2 (b-rectangle r))))

(define (area-rectangle r)
  (* (a-rectangle r)
     (b-rectangle r)))

(define (make-rectangle-alt p1 p2 p3)
  (let ((s1 (make-segment p1 p2))
        (s2 (make-segment p2 p3)))
    (let ((a (length-segment s1))
          (b (cond ((perpendicular? s1 s2)
                    (length-segment s2))
                   (else (error "Provided points are not defining perpendicular lines")))))
      (cons a b))))

(define p1 (make-segment 0 0))
(define p2 (make-segment 4 0))
(define p3 (make-segment 0 4))
(define p4 (make-segment 4 4))
(define s1 (make-segment p1 p2))
(define s2 (make-segment p3 p4))
(define s3 (make-segment p2 p4))
(define r1 (make-rectangle s1 s2))
(define r2 (make-rectangle s1 s3))
(define r3 (make-rectangle-alt p1 p2 p4))
(perimeter-rectangle r1)
(area-rectangle r1)
(perimeter-rectangle r2)
(area-rectangle r2)
(perimeter-rectangle r3)
(area-rectangle r3)
