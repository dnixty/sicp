(define (eval exp env)
  (cond ((self-evaluating? exp)
         exp
         ((variable? exp)
          (lookup-variable-value exp env))
         ((quoted? exp)
          (text-of-quotation exp))
         ((assignment? exp)
          (eval-assignment exp env))
         ((definition? exp)
          (eval-definition exp env))
         ((if? exp)
          (eval-if exp env))
         ((lambda? exp)
          (make-procedure
           (lambda-parameters exp)
           (lambda-body exp)
           env))
         ((begin? exp)
          (eval-sequence
           (begin-actions exp)
           env))
         ((cond? exp)
          (eval (cond->if exp) env))
         ((and? exp)
          (eval-and-predicates (and-predicates exp) env))
         ((or? exp)
          (eval-or-predicates (or-predicates exp) env))
         ((application? exp)
          (apply (eval (operator exp) env)
                 (list-of-values
                  (operands exp)
                  env)))
         (else
          (error "Unknwon expression type: EVAL" exp)))))

(define (and? exp)
  (tagged-list? exp 'and))
(define (and-predicates exp) (cdr exp))
(define (first-predicate seq) (car seq))
(define (rest-predicates seq) (cdr seq))
(define (eval-and-predicates seq env)
  (cond ((null? seq) 'true)
        ((null? (rest-predicates seq))
         (eval (first-predicate seq) env))
        ((true? (eval (first-predicate seq) env))
         (eval-and-predicates (rest-predicates seq) env))
        (else 'false)))

(define (or? exp)
  (tagged-list? exp 'or))
(define (or-predicates exp) (cdr exp))
(define (eval-or-predicates exp env)
  (if (null? seq)
      'false
      (let ((first-val (eval (first-predicate seq) env)))
        (cond ((true? first-val) first-val)
              ((else
                (eval-or-predicates (rest-predicates seq) env)))))))

(define (and->if seq)
  (if (null? seq)
      'true
      (let ((first (first-predicate seq))
            (rest (rest-predicates seq)))
        (if (null? rest)
            (eval first env)
            (make-if (first env)
                     (and->if rest)
                     'false)))))

(define (or->if seq)
  (if (null? seq)
      'false
      (make-if (first-predicate seq)
               (first-predicate seq)
               (or->if (rest-predicates seq)))))
