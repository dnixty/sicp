(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! queue item)
  (set-car! queue item))
(define (set-rear-ptr! queue item)
  (set-cdr! queue item))

(define (make-deque) (cons '() '()))
(define (empty-deque? deque)
  (null? (front-ptr deque)))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque")
      (car (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "REAR called with an empty deque" deque)
      (car (rear-ptr deque))))
(define (front-insert-deque! deque item)
  (set-front-ptr! deque (cons item (car deque)))
  deque)
(define (rear-insert-deque! deque item)
  (let ((new-pair (cons item '())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
           (set-cdr! (rear-ptr deque) new-pair)
           (set-rear-ptr! deque new-pair)
           deque))))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        (else
         (set-front-ptr! deque (cdr (front-ptr deque)))
         deque)))
(define (rear-delete-deque! deque)
  (define (iter queue)
    (let* ((element (car (cdr queue)))
           (new-pair (cons (car queue) '())))
      (if (eq? element (rear-deque deque))
          (begin
            (set-cdr! queue '())
            (set-rear-ptr! deque new-pair)
            deque)
          (iter (cdr queue)))))
  (iter (car deque)))
(define (print-deque deque)
  (display (car deque))
  (newline))

;;; Testing
(define q1 (make-deque))
(rear-insert-deque! q1 'a)
(rear-insert-deque! q1 'b)
(front-insert-deque! q1 'c)
(front-delete-deque! q1)
(front-delete-deque! q1)
(rear-delete-deque! q1)
